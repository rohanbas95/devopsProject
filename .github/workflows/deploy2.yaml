name: Deploy

run-name: Deploy Folder ${{ inputs.level }}

on:
  workflow_dispatch:
    inputs:
      level:
        description: "Specify the level folder to build level6"
        required: true

env:
  NODE_VERSION: 20
  AWS_REGION: ap-south-1
  IMAGE_TAG: latest

jobs:
  build:
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: üêô Checkout code
        uses: actions/checkout@v4

      - name: üî• Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üèóÔ∏è Build Frontend
        working-directory: ./${{ inputs.level }}/frontend
        run: |
          npm ci
          npm run build

      - name: üèóÔ∏è Build Product-Service
        working-directory: ./${{ inputs.level }}/product-service
        run: |
          npm ci
          npm run build

      - name: üèóÔ∏è Build User-Service
        working-directory: ./${{ inputs.level }}/user-service
        run: |
          npm ci
          npm run build

  deploy:
    runs-on: ubuntu-latest
    # needs: build
    steps:
      - name: üêô Checkout code
        uses: actions/checkout@v4

      - name: üî• Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # - name: üèóÔ∏è Build Frontend
      #   working-directory: ./${{ inputs.level }}/frontend
      #   run: |
      #     npm ci
      #     npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîß Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üîë Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: üì¶ Build and Push Product-Service Image
        working-directory: ./${{ inputs.level }}/product-service
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.ECR_REPO_URL }}/my-prod:${{ env.IMAGE_TAG }} --push .

      - name: üì¶ Build and Push User-Service Image
        working-directory: ./${{ inputs.level }}/user-service
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.ECR_REPO_URL }}/my-user:${{ env.IMAGE_TAG }} --push .

      # - name: üöÄ Deploy Frontend to S3
      #   uses: jakejarvis/s3-sync-action@v0.5.1
      #   with:
      #     args: --follow-symlinks --delete
      #   env:
      #     SOURCE_DIR: './${{ inputs.level }}/frontend/build'
      #     AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ env.AWS_REGION }}

      - name: üê≥ Deploy Container
        if: false
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_DNS_NAME }}
          username: ec2-user
          key: ${{ secrets.MY_PRIVATE_KEY }}
          script: |
            sudo dnf update -y
            sudo dnf install docker -y
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo usermod -aG docker $USER
            groups $USER
            sudo systemctl restart docker
            sudo dnf install git -y

            # Login to ECR (this will use the credentials configured in the GitHub Action)
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 504584570834.dkr.ecr.ap-south-1.amazonaws.com

            # the set -e option will cause the script to exit immediately if a simple command exits with a non-zero status
            set -e
            git clone https://github.com/rohanbas95/devopsProject.git
            cd devopsProject/${{ inputs.level }}
            git restore .
            git checkout main
            git pull
            git status
            sleep 7
            docker-compose pull || exit 1
            docker-compose up -d || exit 1
            sleep 10

  test:
    if: false # Ensure this runs even if previous steps fail
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: üê≥ Test Deployment User
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_DNS_NAME }}
          username: ec2-user
          key: ${{ secrets.MY_PRIVATE_KEY }}
          script: |
            # Test REST API endpoints users
            echo "Testing GET endpoint"
            curl -f http://localhost:3001/api/users || exit 1

            echo "Testing POST endpoint"
            RESPONSE=$(curl -s -f -X POST http://localhost:3001/api/users \
              -d '{"name":"testpro","email":"test@example.com"}' \
              -H "Content-Type: application/json") || exit 1

            echo "POST Response: $RESPONSE"
            USER_ID=$(echo $RESPONSE | jq -r '._id')

            echo "Testing PUT endpoint"
            curl -f -X PUT http://localhost:3001/api/users/$USER_ID \
              -d '{"name":"test updated"}' \
              -H "Content-Type: application/json" || exit 1

            echo "Testing DELETE endpoint"
            curl -f -X DELETE http://localhost:3001/api/users/$USER_ID || exit 1

            echo "Testing GET products endpoint from user"
            curl -f http://localhost:3001/api/users/$USER_ID/products || exit 1


      - name: üê≥ Test Deployment Products
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_DNS_NAME }}
          username: ec2-user
          key: ${{ secrets.MY_PRIVATE_KEY }}
          script: |
            # Test REST API endpoints products
            echo "Testing GET endpoint"
            curl -f http://localhost:3002/api/products || exit 1

            echo "Testing POST endpoint"
            RESPONSE=$(curl -s -f -X POST http://localhost:3002/api/products \
              -d '{"name":"testpro","email":"test@example.com"}' \
              -H "Content-Type: application/json") || exit 1

            echo "POST Response: $RESPONSE"
            PRODUCT_ID=$(echo $RESPONSE | jq -r '._id')

            echo "Testing PUT endpoint"
            curl -f -X PUT http://localhost:3002/api/products/$PRODUCT_ID \
              -d '{"name":"test updated"}' \
              -H "Content-Type: application/json" || exit 1

            echo "Testing DELETE endpoint"
            curl -f -X DELETE http://localhost:3002/api/products/$PRODUCT_ID || exit 1

            echo "Testing GET user endpoint from products"
            curl -f http://localhost:3002/api/products/$PRODUCT_ID/user || exit 1

  Post-Deployment:
    if: false # Ensure this runs even if previous steps fail
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: üê≥ Test Deployment User
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_DNS_NAME }}
          username: ec2-user
          key: ${{ secrets.MY_PRIVATE_KEY }}
          script: |
            cd devopsProject/${{ inputs.level }}    
            docker-compose down || exit 1
            docker system prune -f || exit 1
            cd ../../
            rm -r devopsProject -f